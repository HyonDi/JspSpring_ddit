package com.bms.controller.community;

import java.sql.SQLException;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.bms.dto.community.CommunityVO;
import com.bms.dto.member.MemberVO;
import com.bms.dto.reply.ReplyVO;
import com.bms.dto.suggestion.SuggestionVO;
import com.bms.request.paging.SearchCriteria;
import com.bms.request.reply.CommunityReplyRequest;
import com.bms.service.community.CommunityService;
import com.bms.service.member.MemberService;
import com.bms.service.reply.ReplyService;

@Controller
@RequestMapping("/community")
public class CommunityController {
	
	@Autowired
	private CommunityService communityService;
	
	@Autowired
	private ReplyService replyService;
	
	@Autowired
	private MemberService memberService;
	
	@RequestMapping("mobileList")
	public ModelAndView MobilecommunityList(SearchCriteria cri, ModelAndView mnv) throws SQLException {
		String url = "mobile/communityList_resident";
		
		Map<String, Object> dataMap = communityService.getCommunityAll(cri);
		
		mnv.setViewName(url);
		mnv.addAllObjects(dataMap);
		
		return mnv;
	}
	
	@RequestMapping(value="mobileDetail",method=RequestMethod.GET)
	public ModelAndView MobileCommunityDetail(HttpSession session, ModelAndView mnv, String community_code, String chk) throws SQLException {
		String url = "mobile/communityDetail_resident";
		
		if(chk.equals("dt")) {
			url = "mobile/communityDetail_resident2";
		}
		
		//로그인정보
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		CommunityVO community = communityService.getCommunityByCno(community_code);
		
		//댓글
		String board_code = community.getCommunity_code();
		System.out.println("보드코드 : " + board_code);
		List<ReplyVO> reply = null;
		int replyCnt = 0;
		List<CommunityReplyRequest> replyUp = null;
		try {
			reply = replyService.mobileReplyList(board_code);
			replyCnt = replyService.mobileReplyCnt(board_code);
			replyUp = replyService.mobileReplyUpCode();
		}catch(SQLException e) {
			e.printStackTrace();
		}
		

		//회원정보
		String member_code = community.getMember_code();
		String member_name = memberService.getMemberNameByCode(member_code);
		
		
		mnv.setViewName(url);
		mnv.addObject("community", community);
		mnv.addObject("member_name", member_name);
		mnv.addObject("loginUser", loginUser);
		mnv.addObject("reply", reply);
		mnv.addObject("replyCnt",replyCnt);
		mnv.addObject("replyUp", replyUp);
		
		return mnv;
	}
	
	@RequestMapping(value="mobileDetail2",method=RequestMethod.GET)
	public ModelAndView MobileCommunityDetail2(HttpSession session, ModelAndView mnv, String community_code, String chk) throws SQLException {
		String url = "mobile/communityDetail_resident";
		
		if(chk.equals("dt")) {
			url = "mobile/communityDetail_resident2";
		}
		
		//로그인정보
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		CommunityVO community = communityService.getCommunityByCnoNoCnt(community_code);
		
		//댓글
		String board_code = community.getCommunity_code();
		System.out.println("보드코드 : " + board_code);
		List<ReplyVO> reply = null;
		int replyCnt = 0;
		List<CommunityReplyRequest> replyUp = null;
		try {
			reply = replyService.mobileReplyList(board_code);
			replyCnt = replyService.mobileReplyCnt(board_code);
			replyUp = replyService.mobileReplyUpCode();
		}catch(SQLException e) {
			e.printStackTrace();
		}
		

		//회원정보
		String member_code = community.getMember_code();
		String member_name = memberService.getMemberNameByCode(member_code);
		
		
		mnv.setViewName(url);
		mnv.addObject("community", community);
		mnv.addObject("member_name", member_name);
		mnv.addObject("loginUser", loginUser);
		mnv.addObject("reply", reply);
		mnv.addObject("replyCnt",replyCnt);
		mnv.addObject("replyUp", replyUp);
		
		return mnv;
	}
	
	@RequestMapping("mobileRegist")
	public ModelAndView MobileCommuityRegist(ModelAndView mnv, HttpSession session) throws SQLException{
		String url = "mobile/communityRegist_resident";
		
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		mnv.addObject("loginUser", loginUser);
		mnv.setViewName(url);
		
		return mnv;
	}
	
	@RequestMapping(value="mobileRegistAdd", method=RequestMethod.GET)
	@ResponseBody
	public ResponseEntity<String> MobileCommunityAdd(String member_code, String community_contents, String community_title) throws SQLException{
		ResponseEntity<String> entity = null;
		
		CommunityVO community = new CommunityVO();
		community.setMember_code(member_code);
		community.setCommunity_contents(community_contents);
		community.setCommunity_title(community_title);
		
		System.out.println(community.toString());
		
		try {
			communityService.mobileCommunityRegist(community);
			entity = new ResponseEntity<String>(HttpStatus.OK);
		}catch(SQLException e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	
	@RequestMapping("replyRegist")
	@ResponseBody
	public ResponseEntity<String> mobileReplyRegist(HttpSession session, String board_sort_code, String board_code, String reply_contents) throws Exception{
		ResponseEntity<String> entity = null;
		
		MemberVO loginUser = (MemberVO) session.getAttribute("loginUser");
		String member_code = loginUser.getMember_code();
		
		ReplyVO reply = new ReplyVO();
		reply.setBoard_code(board_code);
		reply.setBoard_sort_code(board_sort_code);
		reply.setMember_code(member_code);
		reply.setReply_contents(reply_contents);
		
		try {
			replyService.mobilReplyRegist(reply);
			entity = new ResponseEntity<String>(HttpStatus.OK);
		}catch(SQLException e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@RequestMapping("community_del")
	@ResponseBody
	public ResponseEntity<String> communityDelete(String community_code) throws Exception {
		ResponseEntity<String> entity = null;
		
		try {
			communityService.mobileCommunityDelete(community_code);
			entity = new ResponseEntity<String>(HttpStatus.OK);
		}catch(Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}
	
	@RequestMapping("community_mod")
	@ResponseBody
	public ResponseEntity<String> communityModify(String community_code, String community_title, String community_contents) throws Exception {
		ResponseEntity<String> entity = null;
		
		CommunityVO community = new CommunityVO();
		community.setCommunity_code(community_code);
		community.setCommunity_title(community_title);
		community.setCommunity_contents(community_contents);
		
		try {
			communityService.mobileCommunityModify(community);
			entity = new ResponseEntity<String>(HttpStatus.OK);
		}catch(Exception e) {
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		return entity;
	}

}
